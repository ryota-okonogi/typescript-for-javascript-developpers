export {};

function returnNothing(): void {
  console.log("I don'nt return anything!");
  // return undefined;
}

console.log(returnNothing());

// 出力された undefind は、
// 何も関数がreturnしない場合でも返ってくる。

// こんなときでも関数の戻り値として型を付ける事ができる。
// 関数の戻り値に対する、型指定(アノテーション)をやっていく。

// その方法は、「関数名の後ろにコロンを付けて、その後に返される型のデータを書いてあげる」というもの。

// returnNothing関数は「returnで何かを返す」ような事を目的とする関数ではない <= 元々の大前提
// 上記の方法で「エラーが出たからといって処理内容を変えてreturn文をいちいち書き足していく」というのは、
// 本筋ではない。
// ＝＞ 今回作った「returnNothing関数」はサラッと処理を行って、
// それが済んだら return文とか書かないで終わりにしたい。
// 上記が「本来の目的」

// じゃあどうするか？
// アノテーションで指定したundefinedにカーソルを合わせる
// => 「void」か「any」だったら return文は要らない => 型に指定している undefind が適切ではない
// => undefind を「void」か「any」に書き換えてあげれば OK! ということ

// この様に「関数からの戻り値が無いような事を期待するような型」を void型という。
// 一般的に、関数には return文を書く事ができて、
// その returnされるデータの型を void を書いた部分に指定して上げる事ができる。
// けれども、関数には「必ずしも return文がある訳ではない」ので、そういうケースには、
// 今回のような void型が使える。
